version: '3.1'
services:
  spring:
    build:
      context: backend/.
      dockerfile: Dockerfile
    ports:
      - '8091:8080'
    environment:
      - DB_HOST=mongo
      - DB_USER=root
      - DB_PASSWORD=example
      - PROJECT_ENV=prod
      - 'PROJECT_HOST_DIR=G:/projects'
      - PROJECT_DIR=/projects
      - MODEL_DIR=/models
      - CONTAINER_MANAGER_HOST=manager
      - CONTAINER_MANAGER_PORT=80
      - INTERNAL_NETWORK_NAME=dl_project_network
      - PROJECT_CONTAINER_PREFIX=project_
    volumes:
      - 'G:/projects:/projects'
      - 'G:/models:/models'
    networks:
      - dl_project_network
      - default
  mongo:
    image: 'mongo:4.4'
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - db:/data/db
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
  manager:
    build:
      context: container-manager/.
      dockerfile: Dockerfile
    expose:
      - 80
    volumes:
      - './container-manager/src:/app'
      - '//var/run/docker.sock:/var/run/docker.sock'
      - 'G:/projects:/projects'
  triton:
    image: 'nvcr.io/nvidia/tritonserver:21.04-py3'
    expose:
      - 8000
      - 8001
      - 8002
    volumes:
      - 'G:/models:/models'
    command: tritonserver --model-repository=/models --model-control-mode=explicit
    networks:
      - dl_project_network
volumes:
  project_volume:
    driver: local
    driver_opts:
      type: none
      device: 'G:/projects'
      o: bind
  db:
networks:
  dl_project_network:
    external: true
